# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Resentment 
  @model
  @auth (
    rules: [
      { allow: owner, ownerField: "owner" },
      { allow: private, provider: userPools, operations: [read] },
      { allow: public, provider: iam, operations: [read] }
    ]
  )
  {
    id: ID!
    commentator: ID! @index(name: "byAuthor", sortKeyFields: ["text_content"])
    photo: S3Object
    text_content: String!
    createdDate: AWSDateTime!
    article_id: ID! @index(name: "byPoem", sortKeyFields: ["text_content"])
  }

type Poem 
  @model
  @auth (
    rules: [
      { allow: owner, ownerField: "author" },
      { allow: private, provider: userPools, operations: [read] },
      { allow: public, provider: iam, operations: [read] }
    ]
  ) {
    id: ID!
    title: String!
    text_content: String!
    photo: S3Object
    category: String!
    read_count: Int!
    createdDate: AWSDateTime!    
    owner: ID! @index(name: "byAuthor", sortKeyFields: ["text_content"])
    resentments: [Resentment] @hasMany (indexName: "byPoem", fields: ["id"])
  }

type S3Object {
  region: String!
  bucket: String!
  key: String!
}

type Author 
  @model
  @auth (
    rules: [
      { allow: owner, ownerField: "owner", operations: [update, read] },
      { allow: private, provider: userPools, operations: [read] },
      { allow: public, provider: iam, operations: [read] }
    ]
  ) {
    id: ID!
    user_email:  String!
    owner: String!
    user_description: String!
    user_photo: S3Object
    poems: [Poem] @hasMany (indexName: "byAuthor", fields: ["id"])
    resentments: [Resentment] @hasMany (indexName: "byAuthor", fields: ["id"])
  }

